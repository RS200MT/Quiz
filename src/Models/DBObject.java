package Models;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.sun.jmx.snmp.Timestamp;

public class DBObject {
	public static final String MYSQL_USERNAME = DBInfo.MYSQL_USERNAME;
	public static final String MYSQL_PASSWORD = DBInfo.MYSQL_PASSWORD;
	public static final String MYSQL_DATABASE_SERVER = DBInfo.MYSQL_DATABASE_SERVER;
	public static final String MYSQL_DATABASE_NAME = DBInfo.MYSQL_DATABASE_NAME;

	public static final String TABLE_USERS = "users";

	public DBObject() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Creates and returns connection with the database
	 * 
	 * @return {@link Connection}
	 */
	private Connection getConnection() {
		try {
			String connect = "jdbc:mysql://" + MYSQL_DATABASE_SERVER + "/" + MYSQL_DATABASE_NAME;
			return DriverManager.getConnection(connect, MYSQL_USERNAME, MYSQL_PASSWORD);
		} catch (SQLException e) {
			e.printStackTrace();
			System.err.println("MySQL user password server or db name is incorrect!");
			return null;
		}
	}

	/**
	 * Closes given connection
	 * 
	 * @param conn
	 */
	private void closeConnection(Connection conn) {
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Returns result set generated by executing given query;
	 * 
	 * @param query
	 * @return {@link ResultSet}
	 */
	private ResultSet getResultSet(String query) {
		ResultSet result = null;
		Connection conn = getConnection();
		try {
			Statement stmt = conn.createStatement();
			stmt.executeQuery("USE " + MYSQL_DATABASE_NAME);
			result = stmt.executeQuery(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		closeConnection(conn);
		return result;
	}

	/**
	 * Executes update queries, that is queries
	 * which cause changes in tables of the database;
	 * @param query
	 */
	private void executeUpdate(String query) {
		Connection conn = getConnection();
		try {
			Statement stmt = conn.createStatement();
			stmt.executeQuery("USE " + MYSQL_DATABASE_NAME);
			stmt.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		closeConnection(conn);
	}

	/**
	 * Checks if user with given name or email already exists;
	 * If so, returns false, if such a user doesn't exist,
	 * adds the new user into users table. Uses executeUpdate;
	 * Method receives hashed password;
	 * @param name
	 * @param email
	 * @param hashedPassword
	 * @return boolean
	 */
	public boolean addUser(String username, String email, String hashedPassword) {
		Connection conn = getConnection();
		if (userAlreadyExists(username, email)) {
			closeConnection(conn);
			System.out.println("adduserCheck");
			return false;
		}
		System.out.println("1");
		String query = "INSERT INTO " + TABLE_USERS + " (user_name, email, password) VALUES " + "(\"" + username
				+ "\", \"" + email + "\", \"" + hashedPassword + "\");";
		executeUpdate(query);
		System.out.println("2");
		closeConnection(conn);
		return true;
	}

	/**
	 * Checks if user with given name or email already exists;
	 * 
	 * @param name
	 * @param email
	 * @return boolean
	 */
	private boolean userAlreadyExists(String name, String email) {
		String query = "SELECT * FROM " + TABLE_USERS + " WHERE user_name = \"" + name + "\" or email = \"" + email
				+ "\" limit 1;";
		ResultSet r = getResultSet(query);
		try {
			if (r.next()) 
				return true;
			else 
				return false;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Get hashed password for user with given name;
	 * 
	 * @param userName
	 * @return {@link String}
	 * @throws SQLException
	 */
	public String getPasswordHash(String userName) throws SQLException {
		String query = " Select * from " + TABLE_USERS + " where user_name = \"" + userName + "\"";
		ResultSet rs = getResultSet(query);
		return rs.getString(3);
	}

	private void example() {
		Connection conn = getConnection();

		closeConnection(conn);
	}
}
